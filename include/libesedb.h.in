/*
 * Library to support the Extensible Storage Engine (ESE) Database File (EDB) format
 *
 * Copyright (c) 2009, Joachim Metz <forensics@hoffmannbv.nl>,
 * Hoffmann Investigations. All rights reserved.
 *
 * Refer to AUTHORS for acknowledgements.
 *
 * This software is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this software.  If not, see <http://www.gnu.org/licenses/>.
 */

#if !defined( _LIBESEDB_H )
#define _LIBESEDB_H

#include <libesedb/codepage.h>
#include <libesedb/definitions.h>
#include <libesedb/error.h>
#include <libesedb/extern.h>
#include <libesedb/features.h>
#include <libesedb/types.h>

#include <stdio.h>

#if defined( LIBESEDB_HAVE_BFIO )
#include <libbfio.h>
#endif

#if defined( __cplusplus )
extern "C" {
#endif

/* -------------------------------------------------------------------------
 * Support functions
 * ------------------------------------------------------------------------- */

/* Returns the library version
 */
LIBESEDB_EXTERN const char *libesedb_get_version(
                             void );

/* Determines if a file is a EDB file (check for the EDB file signature)
 * Returns 1 if true, 0 if not or -1 on error
 */
LIBESEDB_EXTERN int libesedb_check_file_signature(
                     const char *filename,
                     libesedb_error_t **error );

#if defined( LIBESEDB_HAVE_WIDE_CHARACTER_TYPE )
/* Determines if a file is a EDB file (check for the EDB file signature)
 * Returns 1 if true, 0 if not or -1 on error
 */
LIBESEDB_EXTERN int libesedb_check_file_signature_wide(
                     const wchar_t *filename,
                     libesedb_error_t **error );
#endif

#if defined( LIBESEDB_HAVE_BFIO )
/* Determines if a file is a EDB file (check for the EDB file signature) using a Basic File IO (bfio) handle
 * Returns 1 if true, 0 if not or -1 on error
 */
LIBESEDB_EXTERN int libesedb_check_file_signature_file_io_handle(
                     libbfio_handle_t *bfio_handle,
                     libesedb_error_t **error );
#endif

/* -------------------------------------------------------------------------
 * Notify functions
 * ------------------------------------------------------------------------- */

/* Set the verbose notification
 */
LIBESEDB_EXTERN void libesedb_notify_set_verbose(
                      int verbose );

/* Set the notification stream
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_notify_set_stream(
                     FILE *stream,
                     libesedb_error_t **error );

/* Opens the notification stream using a filename
 * The stream is opened in append mode
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_notify_stream_open(
                     const char *filename,
                     libesedb_error_t **error );

/* Closes the notification stream if opened using a filename
 * Returns 0 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_notify_stream_close(
                     libesedb_error_t **error );

/* -------------------------------------------------------------------------
 * Error functions
 * ------------------------------------------------------------------------- */

/* Frees the error including elements
 */
LIBESEDB_EXTERN void libesedb_error_free(
                      libesedb_error_t **error );

/* Prints a descriptive string of the error to the stream
 * Returns the amount of printed characters if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_error_fprint(
                     libesedb_error_t *error,
                     FILE *stream );

/* Prints a descriptive string of the error to the string
 * Returns the amount of printed characters if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_error_sprint(
                     libesedb_error_t *error,
                     char *string,
                     size_t size );

/* Prints a backtrace of the error to the stream
 * Returns the amount of printed characters if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_error_backtrace_fprint(
                     libesedb_error_t *error,
                     FILE *stream );

/* Prints a backtrace of the error to the string
 * Returns the amount of printed characters if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_error_backtrace_sprint(
                     libesedb_error_t *error,
                     char *string,
                     size_t size );

/* -------------------------------------------------------------------------
 * File functions
 * ------------------------------------------------------------------------- */

/* Initializes the Extensible Storage Engine Database file
 * Make sure the value file is pointing to is set to NULL
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_file_initialize(
                     libesedb_file_t **file,
                     libesedb_error_t **error );

/* Frees an exisisting Extensible Storage Engine Database file
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_file_free(
                     libesedb_file_t **file,
                     libesedb_error_t **error );

/* Signals the libesedb file to abort its current activity
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_file_signal_abort(
                     libesedb_file_t *file,
                     libesedb_error_t **error );

/* Opens a Extensible Storage Engine Database file
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_file_open(
                     libesedb_file_t *file,
                     const char *filename,
                     int flags,
                     libesedb_error_t **error );

#if defined( LIBESEDB_HAVE_WIDE_CHARACTER_TYPE )
/* Opens a Extensible Storage Engine Database file
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_file_open_wide(
                     libesedb_file_t *file,
                     const wchar_t *filename,
                     int flags,
                     libesedb_error_t **error );
#endif

#if defined( LIBESEDB_HAVE_BFIO )
/* Opens a Extensible Storage Engine Database file using a Basic File IO (bfio) handle
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_file_open_file_io_handle(
                     libesedb_file_t *file,
                     libbfio_handle_t *file_io_handle,
                     int flags,
                     libesedb_error_t **error );
#endif

/* Closes a Extensible Storage Engine Database file
 * Returns 0 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_file_close(
                     libesedb_file_t *file,
                     libesedb_error_t **error );

/* Retrieves the file ASCII codepage
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_file_get_ascii_codepage(
                     libesedb_file_t *file,
                     int *ascii_codepage,
                     libesedb_error_t **error );

/* Sets the file ASCII codepage
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_file_set_ascii_codepage(
                     libesedb_file_t *file,
                     int ascii_codepage,
                     libesedb_error_t **error );

/* Retrieves the file (current) format version
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_file_get_format_version(
                     libesedb_file_t *file,
                     uint32_t *format_version,
                     uint32_t *format_revision,
                     libesedb_error_t **error );

/* Retrieves the file creation version
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_file_get_creation_format_version(
                     libesedb_file_t *file,
                     uint32_t *format_version,
                     uint32_t *format_revision,
                     libesedb_error_t **error );

/* Retrieves the file page size
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_file_get_page_size(
                     libesedb_file_t *file,
                     uint32_t *page_size,
                     libesedb_error_t **error );

/* Retrieves the amount of tables
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_file_get_amount_of_tables(
                     libesedb_file_t *file,
                     int *amount_of_tables,
                     libesedb_error_t **error );

/* Retrieves the table for the specific entry
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_file_get_table(
                     libesedb_file_t *file,
                     int table_entry,
                     libesedb_table_t **table,
                     libesedb_error_t **error );

/* -------------------------------------------------------------------------
 * Table functions
 * ------------------------------------------------------------------------- */

/* Frees a table
 * Detaches the reference from the file if necessary
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_table_free(
                     libesedb_table_t **table,
                     libesedb_error_t **error );

/* Retrieves the table identifier or Father Data Page (FDP) object identifier
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_table_get_identifier(
                     libesedb_table_t *table,
                     uint32_t *identifier,
                     libesedb_error_t **error );

/* Retrieves the UTF-8 string size of the table name
 * The returned size includes the end of string character
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_table_get_utf8_name_size(
                     libesedb_table_t *table,
                     size_t *utf8_string_size,
                     libesedb_error_t **error );

/* Retrieves the UTF-8 string of the table name
 * The string is formatted in UTF-8
 * The size should include the end of string character
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_table_get_utf8_name(
                     libesedb_table_t *table,
                     uint8_t *utf8_string,
                     size_t utf8_string_size,
                     libesedb_error_t **error );

/* Retrieves the amount of columns in the table
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_table_get_amount_of_columns(
                     libesedb_table_t *table,
                     int *amount_of_columns,
                     libesedb_error_t **error );

/* Retrieves the column for the specific entry
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_table_get_column(
                     libesedb_table_t *table,
                     int column_entry,
                     libesedb_column_t **column,
                     libesedb_error_t **error );

/* Retrieves the amount of indexes
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_table_get_amount_of_indexes(
                     libesedb_table_t *table,
                     int *amount_of_indexes,
                     libesedb_error_t **error );

/* Retrieves the index for the specific entry
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_table_get_index(
                     libesedb_table_t *table,
                     int index_entry,
                     libesedb_index_t **index,
                     libesedb_error_t **error );

/* Retrieves the amount of records in the table
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_table_get_amount_of_records(
                     libesedb_table_t *table,
                     int *amount_of_records,
                     libesedb_error_t **error );

/* Retrieves the record for the specific entry
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_table_get_record(
                     libesedb_table_t *table,
                     int record_entry,
                     libesedb_record_t **record,
                     libesedb_error_t **error );

/* -------------------------------------------------------------------------
 * Column functions
 * ------------------------------------------------------------------------- */

/* Frees a column
 * Detaches the reference from the table if necessary
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_column_free(
                     libesedb_column_t **column,
                     libesedb_error_t **error );

/* Retrieves the column identifier
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_column_get_identifier(
                     libesedb_column_t *column,
                     uint32_t *identifier,
                     libesedb_error_t **error );

/* Retrieves the column type
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_column_get_type(
                     libesedb_column_t *column,
                     uint32_t *type,
                     libesedb_error_t **error );

/* Retrieves the UTF-8 string size of the column name
 * The returned size includes the end of string character
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_column_get_utf8_name_size(
                     libesedb_column_t *column,
                     size_t *utf8_string_size,
                     libesedb_error_t **error );

/* Retrieves the UTF-8 string of the column name
 * The string is formatted in UTF-8
 * The size should include the end of string character
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_column_get_utf8_name(
                     libesedb_column_t *column,
                     uint8_t *utf8_string,
                     size_t utf8_string_size,
                     libesedb_error_t **error );

/* -------------------------------------------------------------------------
 * Index functions
 * ------------------------------------------------------------------------- */

/* Frees a index
 * Detaches the reference from the table if necessary
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_index_free(
                     libesedb_index_t **index,
                     libesedb_error_t **error );

/* Retrieves the index identifier or Father Data Page (FDP) object identifier
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_index_get_identifier(
                     libesedb_index_t *index,
                     uint32_t *identifier,
                     libesedb_error_t **error );

/* Retrieves the UTF-8 string size of the index name
 * The returned size includes the end of string character
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_index_get_utf8_name_size(
                     libesedb_index_t *index,
                     size_t *utf8_string_size,
                     libesedb_error_t **error );

/* Retrieves the UTF-8 string of the index name
 * The string is formatted in UTF-8
 * The size should include the end of string character
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_index_get_utf8_name(
                     libesedb_index_t *index,
                     uint8_t *utf8_string,
                     size_t utf8_string_size,
                     libesedb_error_t **error );

/* -------------------------------------------------------------------------
 * Record (row) functions
 * ------------------------------------------------------------------------- */

/* Frees a record
 * Detaches the reference from the table if necessary
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_record_free(
                     libesedb_record_t **record,
                     libesedb_error_t **error );

/* Retrieves the amount of values in the record of the referenced record
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_record_get_amount_of_values(
                     libesedb_record_t *record,
                     int *amount_of_values,
                     libesedb_error_t **error );

/* Retrieves the column type of the specific entry from the referenced record
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_record_get_column_type(
                     libesedb_record_t *record,
                     int value_entry,
                     uint32_t *column_type,
                     libesedb_error_t **error );

/* Retrieves the UTF-8 string size of the column name of the specific entry from the referenced record
 * The returned size includes the end of string character
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_record_get_utf8_column_name_size(
                     libesedb_record_t *record,
                     int value_entry,
                     size_t *utf8_string_size,
                     libesedb_error_t **error );

/* Retrieves the UTF-8 string of the column name of the specific entry from the referenced record
 * The string is formatted in UTF-8
 * The size should include the end of string character
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_record_get_utf8_column_name(
                     libesedb_record_t *record,
                     int value_entry,
                     uint8_t *utf8_string,
                     size_t utf8_string_size,
                     libesedb_error_t **error );

/* Retrieves the value of the specific entry from the referenced record
 * Returns 1 if successful or -1 on error
 */
LIBESEDB_EXTERN int libesedb_record_get_value(
                     libesedb_record_t *record,
                     int value_entry,
                     uint8_t **value_data,
                     size_t *value_data_size,
                     libesedb_error_t **error );

/* Retrieves the boolean value of a specific entry from the referenced record
 * Returns 1 if successful, 0 if value is NULL or -1 on error
 */
LIBESEDB_EXTERN int libesedb_record_get_value_boolean(
                     libesedb_record_t *record,
                     int value_entry,
                     uint8_t *value,
                     libesedb_error_t **error );

/* Retrieves the 8-bit value of a specific entry from the referenced record
 * Returns 1 if successful, 0 if value is NULL or -1 on error
 */
LIBESEDB_EXTERN int libesedb_record_get_value_8bit(
                     libesedb_record_t *record,
                     int value_entry,
                     uint8_t *value,
                     libesedb_error_t **error );

/* Retrieves the 16-bit value of a specific entry from the referenced record
 * Returns 1 if successful, 0 if value is NULL or -1 on error
 */
LIBESEDB_EXTERN int libesedb_record_get_value_16bit(
                     libesedb_record_t *record,
                     int value_entry,
                     uint16_t *value,
                     libesedb_error_t **error );

/* Retrieves the 32-bit value of a specific entry from the referenced record
 * Returns 1 if successful, 0 if value is NULL or -1 on error
 */
LIBESEDB_EXTERN int libesedb_record_get_value_32bit(
                     libesedb_record_t *record,
                     int value_entry,
                     uint32_t *value,
                     libesedb_error_t **error );

/* Retrieves the 64-bit value of a specific entry from the referenced record
 * Returns 1 if successful, 0 if value is NULL or -1 on error
 */
LIBESEDB_EXTERN int libesedb_record_get_value_64bit(
                     libesedb_record_t *record,
                     int value_entry,
                     uint64_t *value,
                     libesedb_error_t **error );

/* Retrieves the 64-bit filetime value of a specific entry from the referenced record
 * Returns 1 if successful, 0 if value is NULL or -1 on error
 */
LIBESEDB_EXTERN int libesedb_record_get_value_filetime(
                     libesedb_record_t *record,
                     int value_entry,
                     uint64_t *value,
                     libesedb_error_t **error );

/* Retrieves the floating point value of a specific entry from the referenced record
 * Returns 1 if successful, 0 if value is NULL or -1 on error
 */
LIBESEDB_EXTERN int libesedb_record_get_value_floating_point(
                     libesedb_record_t *record,
                     int value_entry,
                     double *value,
                     libesedb_error_t **error );

/* Retrieves the UTF-8 string size of a specific entry from the referenced record
 * The returned size includes the end of string character
 * Returns 1 if successful, 0 if value is NULL or -1 on error
 */
LIBESEDB_EXTERN int libesedb_record_get_value_utf8_string_size(
                     libesedb_record_t *record,
                     int value_entry,
                     size_t *utf8_string_size,
                     libesedb_error_t **error );

/* Retrieves the UTF-8 string value of a specific entry from the referenced record
 * The string is formatted in UTF-8
 * The function uses a codepage if necessary, it tries to read the codepage in the column definition
 * if not available it uses the codepage set for the library
 * The size should include the end of string character
 * Returns 1 if successful, 0 if value is NULL or -1 on error
 */
LIBESEDB_EXTERN int libesedb_record_get_value_utf8_string(
                     libesedb_record_t *record,
                     int value_entry,
                     uint8_t *utf8_string,
                     size_t utf8_string_size,
                     libesedb_error_t **error );

/* Retrieves the UTF-16 string size of a specific entry from the referenced record
 * The returned size includes the end of string character
 * Returns 1 if successful, 0 if value is NULL or -1 on error
 */
LIBESEDB_EXTERN int libesedb_record_get_value_utf16_string_size(
                     libesedb_record_t *record,
                     int value_entry,
                     size_t *utf16_string_size,
                     libesedb_error_t **error );

/* Retrieves the UTF-16 string value of a specific entry from the referenced record
 * The string is formatted in UTF-16
 * The function uses a codepage if necessary, it tries to read the codepage in the column definition
 * if not available it uses the codepage set for the library
 * The size should include the end of string character
 * Returns 1 if successful, 0 if value is NULL or -1 on error
 */
LIBESEDB_EXTERN int libesedb_record_get_value_utf16_string(
                     libesedb_record_t *record,
                     int value_entry,
                     uint16_t *utf16_string,
                     size_t utf16_string_size,
                     libesedb_error_t **error );

/* Retrieves the binary data size of a specific entry from the referenced record
 * Returns 1 if successful, 0 if value is NULL or -1 on error
 */
LIBESEDB_EXTERN int libesedb_record_get_value_binary_data_size(
                     libesedb_record_t *record,
                     int value_entry,
                     size_t *binary_data_size,
                     libesedb_error_t **error );

/* Retrieves the binary data value of a specific entry from the referenced record
 * Returns 1 if successful, 0 if value is NULL or -1 on error
 */
LIBESEDB_EXTERN int libesedb_record_get_value_binary_data(
                     libesedb_record_t *record,
                     int value_entry,
                     uint8_t *binary_data,
                     size_t binary_data_size,
                     libesedb_error_t **error );

#if defined( __cplusplus )
}
#endif

#endif

